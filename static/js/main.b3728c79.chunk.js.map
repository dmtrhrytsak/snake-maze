{"version":3,"sources":["redux/features/hoveredCellsSlice.ts","redux/store.ts","components/PickMode/PickMode.tsx","components/CellItem/CellItem.tsx","components/Field/Field.tsx","components/HoverCells/HoverCells.tsx","lib/api/request.ts","App.tsx","lib/hooks/useFetch.ts","index.tsx"],"names":["hoveredCellsSlice","createSlice","name","initialState","cells","reducers","populateCells","state","action","newCells","row","payload","cellsNumber","col","push","id","nanoid","position","isHoveredOn","toggleHovered","cellToToggleeHovered","find","cell","actions","store","configureStore","reducer","hoveredCellsReducer","PickMode","setupField","className","useState","isDifficultyChoosen","setIsDifficultyChoosen","choosenDifficulty","setChoosenDifficulty","classNames","value","onChange","event","target","onClick","CellItem","index","dispatch","useDispatch","onMouseEnter","Field","useSelector","style","display","gridTemplateColumns","gridAutoRows","map","HoverCells","hoveredCells","filter","hoveredCell","request","url","a","fetch","response","ok","Error","status","statusText","json","data","App","setCellsNumber","setData","error","setError","useEffect","getData","message","useFetch","mode","field","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b3728c79.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { nanoid } from 'nanoid';\n\nimport { Cell } from '../../lib/types/Cell';\n\ninterface PopulateCellsPayload {\n  cellsNumber: number;\n}\n\ninterface ToggleHoveredPayload {\n  id: Cell['id'];\n}\n\ntype intiailStateType = {\n  cells: Cell[];\n};\n\nconst initialState: intiailStateType = { cells: [] };\n\nconst hoveredCellsSlice = createSlice({\n  name: 'hoveredCells',\n  initialState: initialState,\n  reducers: {\n    populateCells: (state, action: PayloadAction<PopulateCellsPayload>) => {\n      const newCells: Cell[] = [];\n\n      for (let row = 1; row <= action.payload.cellsNumber; row++) {\n        for (let col = 1; col <= action.payload.cellsNumber; col++) {\n          newCells.push({\n            id: nanoid(),\n            position: { row, col },\n            isHoveredOn: false,\n          });\n        }\n      }\n\n      state.cells = newCells;\n    },\n    toggleHovered: (state, action: PayloadAction<ToggleHoveredPayload>) => {\n      const cellToToggleeHovered = state.cells.find(\n        (cell) => cell.id === action.payload.id\n      );\n\n      if (!cellToToggleeHovered) {\n        return;\n      }\n\n      cellToToggleeHovered.isHoveredOn = !cellToToggleeHovered.isHoveredOn;\n    },\n  },\n});\n\nexport const { populateCells, toggleHovered } = hoveredCellsSlice.actions;\n\nexport default hoveredCellsSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport hoveredCellsReducer from './features/hoveredCellsSlice';\n\nexport const store = configureStore({\n  reducer: hoveredCellsReducer,\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\n","import { useState } from 'react';\nimport classNames from 'classnames';\n\nimport { Mode } from '../../lib/types/Mode';\n\nimport './PickMode.scss';\n\ntype Props = {\n  setupField: (choosenDifficulty: Mode | string) => void;\n  className: string;\n};\n\nconst PickMode: React.FC<Props> = ({ setupField, className }) => {\n  const [isDifficultyChoosen, setIsDifficultyChoosen] = useState(true);\n  const [choosenDifficulty, setChoosenDifficulty] = useState<Mode | string>('');\n\n  return (\n    <div className={classNames('PickMode', className)}>\n      <select\n        value={choosenDifficulty}\n        className=\"PickMode__picker\"\n        onChange={(event) => {\n          setChoosenDifficulty(event.target.value);\n          setIsDifficultyChoosen(true);\n        }}\n      >\n        <option value=\"\">Pick Mode</option>\n        <option value=\"easyMode\">Easy Mode</option>\n        <option value=\"normalMode\">Normal Mode</option>\n        <option value=\"hardMode\">Hard Mode</option>\n      </select>\n\n      <button\n        className=\"PickMode__button\"\n        onClick={() => {\n          setIsDifficultyChoosen(choosenDifficulty !== '');\n          setupField(choosenDifficulty);\n        }}\n      >\n        Start\n      </button>\n\n      {!isDifficultyChoosen && (\n        <p className=\"PickMode__error\">Please, choose the difficulty!⚠️</p>\n      )}\n    </div>\n  );\n};\n\nexport { PickMode };\n","import { useDispatch } from 'react-redux';\nimport classNames from 'classnames';\n\nimport { toggleHovered } from '../../redux/features/hoveredCellsSlice';\n\nimport './CellItem.scss';\nimport { Cell } from '../../lib/types/Cell';\n\ntype Props = {\n  index: number;\n} & Omit<Cell, 'position'>;\n\nconst CellItem: React.FC<Props> = ({ id, index, isHoveredOn }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <div\n      className={classNames('CellItem', { 'CellItem--hovered': isHoveredOn })}\n      onMouseEnter={() => dispatch(toggleHovered({ id }))}\n    >\n      {index + 1}\n    </div>\n  );\n};\n\nexport { CellItem };\n","import { useSelector } from 'react-redux';\n\nimport { CellItem } from '../CellItem';\n\nimport { RootState } from '../../redux/store';\n\nimport './Field.scss';\n\ntype Props = {\n  cellsNumber: number;\n};\n\nconst Field: React.FC<Props> = ({ cellsNumber }) => {\n  const cells = useSelector((state: RootState) => state.cells);\n\n  return (\n    <div\n      className=\"Field\"\n      style={{\n        display: 'grid',\n        gridTemplateColumns: `repeat(${cellsNumber}, 1fr)`,\n        gridAutoRows: '1fr',\n      }}\n    >\n      {cells.map(({ id, isHoveredOn }, index) => (\n        <CellItem key={id} id={id} index={index} isHoveredOn={isHoveredOn} />\n      ))}\n    </div>\n  );\n};\n\nexport { Field };\n","import { useSelector } from 'react-redux';\n\nimport { RootState } from '../../redux/store';\n\nimport './HoverCells.scss';\n\nconst HoverCells = () => {\n  const hoveredCells = useSelector((state: RootState) =>\n    state.cells.filter((cell) => cell.isHoveredOn)\n  );\n\n  return (\n    <div className=\"HoverCells\">\n      <h2 className=\"HoverCells__title\">Hover squares</h2>\n\n      <div className=\"HoverCells__cells\">\n        {hoveredCells.map((hoveredCell) => (\n          <p key={hoveredCell.id} className=\"HoverCells__cell-info\">\n            row {hoveredCell.position.row} col {hoveredCell.position.col}\n          </p>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport { HoverCells };\n","export const request = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n\n  if (!response.ok) {\n    throw new Error(`${response.status}: ${response.statusText}`);\n  }\n\n  const data = await response.json();\n\n  return data;\n};\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { PickMode } from './components/PickMode';\nimport { Field } from './components/Field';\nimport { HoverCells } from './components/HoverCells';\n\nimport { Mode, ModeInfo } from './lib/types/Mode';\nimport { useFetch } from './lib/hooks/useFetch';\n\nimport { populateCells } from './redux/features/hoveredCellsSlice';\n\nimport './App.scss';\n\nconst App = () => {\n  const [cellsNumber, setCellsNumber] = useState(0);\n  const [mode, error] = useFetch<ModeInfo>('https://demo1030918.mockable.io/');\n\n  const dispatch = useDispatch();\n\n  const setupField = (choosenDifficulty: Mode | string) => {\n    if (!mode) {\n      return;\n    }\n\n    const cellsNumber = mode[choosenDifficulty as Mode]?.field || 0;\n\n    dispatch(populateCells({ cellsNumber }));\n    setCellsNumber(cellsNumber);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__field-part\">\n        <PickMode setupField={setupField} className=\"App__pick-mode\" />\n\n        {cellsNumber !== 0 && <Field cellsNumber={cellsNumber} />}\n\n        {error && (\n          <p className=\"App__error\">\n            Sorry, we couldn't fetch data from the server.\n          </p>\n        )}\n      </div>\n\n      <HoverCells />\n    </div>\n  );\n};\n\nexport { App };\n","import { useState, useEffect } from 'react';\n\nimport { request } from '../api/request';\nimport { FetchError } from '../types/FetchError';\n\nexport const useFetch = <T>(url: string) => {\n  const [data, setData] = useState<T | null>(null);\n  const [error, setError] = useState<FetchError['message'] | null>(null);\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const data = await request<T>(url);\n\n        setData(data);\n      } catch (error) {\n        setError((error as FetchError).message);\n      }\n    };\n\n    getData();\n  }, [url]);\n\n  return [data, error] as const;\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { store } from './redux/store';\n\nimport { App } from './App';\n\nimport './lib/reset.scss';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}